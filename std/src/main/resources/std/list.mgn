load std.functions
load std.logic
load std.arithmetic

def nil := \a.b. b
def isnil := \l.l (\h.t.d. (\a.b.b)) (\a.b.a)

/* Reverses the list `xs`
 */
def reverse := \xs. Y (\reverseRec.xs.acc. (isnil xs) acc (reverseRec (tail xs) (cons (head xs) acc))) xs []

/* Range from `start` to `next`, with a step-size of `1`
 * example: range 1 5 = [1,2,3,4,5]
 * require: start <= end
 */
def range := \start.end. rangeWithStep start 1 end

/* Range from `start` to `next`, with a step-size of `(next - start)`
 * example: rangeWithNext 1 3 10 = [1,3,5,7,9]
 * require: start <= end
 */
def rangeWithNext := \start.next.end. rangeWithStep start (minus next start) end

/* Range from `start` to `next`
 * example: rangeWithStep 5 3 15 = [5,8,11,14]
 * require: start <= end
 */
def rangeWithStep := Y (\rec.start.step.end. (le start end) (cons start (rec (plus start step) step end)) nil)

/* Maps function `f` over the elements of list `xs`
 */
def map := \f.xs. Y (\mapRec.xs. (isnil xs) [] (cons (f (head xs)) (mapRec (tail xs)))) xs

/* Creates a list containing `n` times `x`
 */
def replicate := \n.x. Y (\replicateRec.i. (lt i n) (cons x (replicateRec (succ i))) []) 0

def foldl := \op.zero.xs. Y (\foldlRec.xs.acc. (isnil xs) acc (foldlRec (tail xs) (op acc (head xs)))) xs zero

def foldr := \op.zero.xs. foldl (\a.b. op b a) zero (reverse xs)

def sum := \xs. foldl plus 0 xs

def last := \xs. foldl (\a.b.b) [] xs

def pair := \x.y.z. z x y
def first := \n.n (\a.b.a)
def second := \n.n (\a.b.b)

def cons := pair
def head := first
def tail := second

/* Takes `n` first elements from list `xs`
 */
def take := Y (\rec.n.xs. (isnil xs) [] ((gt n 0) (cons (head xs) (rec (pred n) (tail xs))) []))

/* Applied to a predicate `p` and a list `xs`, returns the longest
 * prefix (possibly empty) of `xs` of elements that satisfy `p`
 */
def takeWhile := Y (\rec.p.xs. (isnil xs) [] ((p (head xs)) (cons (head xs) (rec p (tail xs))) []))

def dropWhile := Y (\rec.p.xs. (isnil xs) [] ((p (head xs)) (rec p (tail xs)) xs))

/* Concatenation of lists `xs` and `ys`, by reconstruction of `xs`
 * as a prefix of `ys`
 */
def concat := \xs.ys. Y (\rec.zs. (isnil zs)
				   ys
				   (cons (head zs)
				   	 (rec (tail zs)))) xs

/* Returns a tuple (a, b) where
 * a is a boolean indicating if the nth value is present
 * b is the nth element of the sequence or nil, if a is false
 */
def nth := Y (\rec.n.xs. (isnil xs)
    	     		 (pair false [])
			 ((eq n 0)
			  (pair true (head xs))
			  (rec (pred n)
			       (tail xs))))
